#include "cardinalscene.h"
#include "cardinal.h"
#include <stdio.h>
#include <QGraphicsSceneMouseEvent>

CardinalScene::CardinalScene()
    : tensionValue(0.0f)
{
}

CardinalScene::~CardinalScene()
{
}

void CardinalScene::updateCardinalPoints()
{
    /// Cleanup the current scene
    for (int i = 0; i < this->points.size(); i++)
        this->removeItem(this->points[i]);
    this->clear();

    /// Draw all the controlpoints
    for (int i = 0; i < this->points.size(); i++)
    {
        int v = (255 / this->points.size()) * i;
        this->points[i]->setPen(QPen(QColor(255 - v, 0, v)));
        this->points[i]->setBrush(QBrush(QColor(255 - v, 0, v)));
        this->addItem(this->points[i]);
    }

    /// Generate and draw the curve generated by the cardinal class
    Cardinal cardinal(this->points, this->tensionValue);
    QVector<QPointF> cardinalPoints = cardinal.generatePoints();
    QPointF vorigPunt = cardinalPoints.at(0);
    for(int i = 1; i <= cardinalPoints.size() - 1; i++){
        QPointF punt = cardinalPoints.at(i);
        this->addLine(vorigPunt.x(), vorigPunt.y(), punt.x(), punt.y(), QPen(QColor(0, 255, 0), 0.2f));
        vorigPunt = punt;
    }
}

void CardinalScene::setCardinalPoints(QVector<CustomPoint*> controlPoints)
{
    /// First remove all the previous control points from the scene
    while (this->points.empty() == false)
    {
        CustomPoint* point = this->points.first();
        this->points.pop_front();
        this->removeItem(point);
    }

    /// Save the new control points and update the scene
    for (int i = 0; i < controlPoints.size(); i++)
        this->points << controlPoints[i];
    this->updateCardinalPoints();
}

void CardinalScene::tensionChanged(double d)
{
    /// Save the new tension value and update the scene
    this->tensionValue = d;
    this->updateCardinalPoints();
}

void CardinalScene::mouseReleaseEvent(QGraphicsSceneMouseEvent* mouseEvent)
{
    /// Update the cardinal curve after the user changed some point
    this->updateCardinalPoints();
}
